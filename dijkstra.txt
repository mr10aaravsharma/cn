int miniDist(int distance[], bool Tset[]){
int minimum = INT_MAX, ind;
for (int k = 0; k < V; k++){
if (Tset[k] == false && distance[k] <= minimum){
minimum = distance[k];
ind = k;
}
}
return ind;
}
void DijkstraAlgo(int graph[V][V], int src){
int distance[V];
bool Tset[V];
for (int k = 0; k < V; k++){
distance[k] = INT_MAX;
Tset[k] = false;
}
distance[src] = 0;
for (int k = 0; k < V; k++){
int m = miniDist(distance, Tset);
Tset[m] = true;
for (int k = 0; k < V; k++){
if (!Tset[k] && graph[m][k] && distance[m] != INT_MAX &&
distance[m] + graph[m][k] < distance[k])
distance[k] = distance[m] + graph[m][k];
}
}
cout << "Vertex\tDistance from source vertex" << endl;
for (int k = 0; k < V; k++){
char str = 65 + k;
cout << str << "\t\t" << distance[k] << endl;
}
}
int main(){
int graph[V][V] = {{0, 5, 0, 0, 0, 0, 0, 6, 0},
{4, 0, 10, 0, 0, 0, 0, 1, 0},
{0, 11, 0, 6, 0, 3, 0, 0, 4},
{0, 0, 9, 0, 7, 1, 0, 0, 0},
{0, 0, 0, 12, 0, 5, 0, 0, 0},
{0, 0, 4, 13, 6, 0, 7, 0, 0},
{0, 0, 0, 0, 0, 12, 0, 6, 4},
{7, 4, 0, 0, 0, 0, 12, 0, 1},
{0, 0, 15, 0, 0, 0, 4, 7, 0}};
DijkstraAlgo(graph, 0);
return 0;
}